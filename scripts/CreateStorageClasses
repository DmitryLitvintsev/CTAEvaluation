#! /usr/bin/env python3

import argparse
import copy
import os
import time

from sqlalchemy import create_engine, select
from sqlalchemy.exc import IntegrityError
from sqlalchemy.orm import Session
from sqlalchemy.sql.expression import func

from CTADatabaseModel import ArchiveRoute, StorageClass, TapePool, VirtualOrganization
from EnstoreDatabaseModel import EnstoreVolume
from SQAReflection import EnstoreReflected, CTAReflected

CTA_INSTANCE = 'eosdev'
NOW = time.time()
HOSTNAME = os.uname()[1]
USERNAME = 'migrate'
VALID_MEDIA_TYPES = ['LTO8', 'M8', 'LTO9']

SQL_USER = os.getenv('SQL_USER')
SQL_PASSWORD = os.environ.get('SQL_PASSWORD')
SQL_HOST = os.getenv('SQL_HOST')
SQL_PORT = os.getenv('SQL_PORT')
SQL_DB = os.getenv('SQL_DB')

ENSTORE_USER = os.getenv('ENSTORE_USER')
ENSTORE_PASSWORD = os.environ.get('ENSTORE_PASSWORD')
ENSTORE_HOST = os.getenv('ENSTORE_HOST')
ENSTORE_PORT = os.getenv('ENSTORE_PORT')
ENSTORE_DB = os.getenv('ENSTORE_DB')

parser = argparse.ArgumentParser(prog='EnstoreMigrate',
                                 description='Migrate a tape from Enstore (either DB or a CSV representation) into CTA',
                                 epilog=None)

parser.add_argument('-v', '--verbose', action='store_true', help='Debug mode. Will print all SQL statements')


def main():
    # Extract command line arguments
    args = parser.parse_args()

    debug = args.verbose

    connect_string = f'postgresql://{ENSTORE_USER}:{ENSTORE_PASSWORD}@{ENSTORE_HOST}:{ENSTORE_PORT}/{ENSTORE_DB}'
    enstore_engine = create_engine(connect_string, echo=debug, future=True)

    cta_engine = create_engine(f'postgresql://{SQL_USER}:{SQL_PASSWORD}@{SQL_HOST}:{SQL_PORT}/{SQL_DB}',
                               echo=debug, future=True)

    EnstoreReflected.prepare(enstore_engine)
    CTAReflected.prepare(cta_engine)

    with Session(cta_engine) as session, session.begin():
        next_vo = int(session.query(func.max(VirtualOrganization.virtual_organization_id)).scalar()) + 1
        next_sc = int(session.query(func.max(StorageClass.storage_class_id)).scalar()) + 1
        next_tp = int(session.query(func.max(TapePool.tape_pool_id)).scalar()) + 1

    common = {'creation_log_host_name': HOSTNAME, 'creation_log_time': NOW, 'creation_log_user_name': USERNAME,
              'last_update_host_name': HOSTNAME, 'last_update_time': NOW, 'last_update_user_name': USERNAME,
              'user_comment': 'Migrated from Enstore'}

    with Session(enstore_engine, future=True) as enstore_session:
        storage_groups = enstore_session.scalars(select(EnstoreVolume.storage_group)
                                                 .where((EnstoreVolume.active_files > 0)
                                                        & (EnstoreVolume.system_inhibit_0 == 'none')
                                                        & EnstoreVolume.library.not_like('shelf%'))
                                                 .distinct()).all()
        print(f'There are {len(storage_groups)} valid storage groups')

        for storage_group in storage_groups:
            # Inner context calls session.commit(), if there were no exceptions, outer context calls session.close()
            with Session(cta_engine) as session, session.begin():
                last_vo = session.scalars(select(VirtualOrganization.virtual_organization_id)
                                          .where(VirtualOrganization.virtual_organization_name == storage_group)
                                          ).first()
                if not last_vo:
                    try:
                        session.add(
                            VirtualOrganization(virtual_organization_name=storage_group,
                                                virtual_organization_id=next_vo,
                                                disk_instance_name=CTA_INSTANCE, max_file_size=50 * 1e9,
                                                read_max_drives=0, write_max_drives=0, **common)
                        )
                        last_vo = next_vo
                        next_vo += 1
                    except IntegrityError:
                        raise
                else:
                    last_vo = int(last_vo)

            print(f'ID for VO {storage_group} is {last_vo}')
            file_families = enstore_session.scalars(select(EnstoreVolume.file_family)
                                                    .distinct()
                                                    .where((EnstoreVolume.storage_group == storage_group)
                                                           & EnstoreVolume.media_type.in_(VALID_MEDIA_TYPES))).all()
            print(f'{storage_group} contains {len(file_families)} file families')

            for file_family in file_families:
                if file_family.endswith('_copy_1'):
                    new_file_family = file_family.replace('_copy_1', '')
                    storage_class = f'{storage_group}.{new_file_family}@cta'
                    tape_pool = f'{storage_group}.{new_file_family}.2'
                    archive_route_comment = f'Route from {storage_class} to {tape_pool}, copy 2'
                    copy_number = 2
                    storage_class_copies = 2
                elif f'{file_family}_copy_1' in file_families:
                    storage_class = f'{storage_group}.{file_family}@cta'
                    tape_pool = f'{storage_group}.{file_family}.1'
                    archive_route_comment = f'Route from {storage_class} to {tape_pool}, copy 1'
                    copy_number = 1
                    storage_class_copies = 2
                else:
                    storage_class = f'{storage_group}.{file_family}@cta'
                    tape_pool = f'{storage_group}.{file_family}'
                    archive_route_comment = f'Route from {storage_class} to {tape_pool}'
                    copy_number = 1
                    storage_class_copies = 1

                # Create Storage class (include possiblitity it exists)
                with Session(cta_engine) as session, session.begin():
                    last_sc = session.scalars(select(StorageClass.storage_class_id)
                                              .where(StorageClass.storage_class_name == storage_class)
                                              ).first()
                    if not last_sc:
                        try:
                            session.add(
                                StorageClass(storage_class_name=storage_class, storage_class_id=next_sc,
                                             virtual_organization_id=last_vo, nb_copies=storage_class_copies,
                                             **common)
                            )
                            last_sc = next_sc
                            next_sc += 1
                        except IntegrityError:
                            raise
                    else:
                        last_sc = int(last_sc)

                # Create Tape pool (include possiblitity it exists)
                with Session(cta_engine) as session, session.begin():
                    last_tp = session.scalars(select(TapePool.tape_pool_id)
                                              .where(TapePool.tape_pool_name == tape_pool)
                                              ).first()
                    if not last_tp:
                        try:
                            session.add(
                                TapePool(tape_pool_name=tape_pool, tape_pool_id=next_tp,
                                         virtual_organization_id=last_vo,
                                         nb_partial_tapes=0, supply='',
                                         is_encrypted='0', encryption_key_name='', **common)
                            )
                            last_tp = next_tp
                            next_tp += 1
                        except IntegrityError:
                            raise
                    else:
                        last_tp = int(last_tp)

                # Create archive route (include possiblitity it exists)
                ar_common = copy.deepcopy(common)
                ar_common['user_comment'] = archive_route_comment
                with Session(cta_engine) as session, session.begin():
                    last_ar = session.scalars(select(ArchiveRoute.storage_class_id)
                                              .where((ArchiveRoute.storage_class_id == last_sc)
                                                     & (ArchiveRoute.copy_nb == copy_number))
                                              ).first()
                    if not last_ar:
                        try:
                            session.add(
                                ArchiveRoute(storage_class_id=last_sc,
                                             tape_pool_id=last_tp, copy_nb=copy_number,
                                             **ar_common)
                            )
                        except IntegrityError:
                            raise
                    else:
                        pass

                print(archive_route_comment)

    return


main()
